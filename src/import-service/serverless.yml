org: artabr
app: diveshop-aws-project-api
service: diveshop-aws-project-api
frameworkVersion: '3'

custom:
  bucketName: diveshop-aws-project-api-upload-${self:provider.stage}
  TopicArn: "arn:aws:sns:${opt:region, self:provider.region}:*:createProductTopic"

provider:
  name: aws
  runtime: nodejs14.x
  region: eu-central-1
  stage: test

  iam:
    role:
      statements:
        - Effect: Allow
          Action:
            - s3:GetObject
            - s3:PutObject
            - s3:PutObjectAcl
          Resource:
            - arn:aws:s3:::${self:custom.bucketName}/*
          Sid: AllowPublic
        - Effect: Allow
          Action:
            - sqs:SendMessage
          Resource:
            - Fn::GetAtt: [ catalogItemsQueue, Arn ]
        - Effect: Allow
          Action:
            - dynamodb:Query
            - dynamodb:Scan
            - dynamodb:GetItem
            - dynamodb:PutItem
            - dynamodb:UpdateItem
            - dynamodb:DeleteItem
          Resource:
            - "arn:aws:dynamodb:${opt:region, self:provider.region}:*:table/diveshop_products"
            - "arn:aws:dynamodb:${opt:region, self:provider.region}:*:table/diveshop_stocks"
        - Effect: Allow
          Action:
            - "sns:*"
          Resource:
            Ref: createProductTopic

functions:
  catalogBatchProcess:
    handler: handler/catalogBatchProcess.catalogBatchProcess
    events:
      - sqs:
          batchSize: 5
          arn:
            Fn::GetAtt:
              - catalogItemsQueue
              - Arn

  importProductsFile:
    handler: handler/importProductsFile.importProductsFile
    environment:
      UploadBucket: ${self:custom.bucketName}
    events:
      - httpApi:
          path: /import
          method: get

  importFileParser:
    handler: handler/importFileParser.importFileParser
    environment:
      UploadBucket: ${self:custom.bucketName}
      SQS_URL:
        Ref: catalogItemsQueue
    events:
      - s3:
          bucket: ${self:custom.bucketName}
          event: s3:ObjectCreated:*
          existing: true
          rules:
            - prefix: uploaded/
            - suffix: .csv

resources:
  Resources:
    createProductTopic:
      Type: AWS::SNS::Topic
      Properties:
        DisplayName: "The notification topic for create product events"
        TopicName: createProductTopic

    emailToSNSUploadProgressNotificationTopicSubscription:
      Type: AWS::SNS::Subscription
      Properties:
        Endpoint: "artemabr@gmail.com"
        Protocol: "email"
        TopicArn:
          Ref: createProductTopic

    catalogItemsQueue:
      Type: AWS::SQS::Queue
      Properties:
        QueueName: catalogItemsQueue

    UploadBucket:
      Type: AWS::S3::Bucket
      Properties:
        BucketName: ${self:custom.bucketName}
        AccessControl: PublicRead
        CorsConfiguration:
          CorsRules:
            - AllowedHeaders:
                - "*"
              AllowedMethods:
                - GET
                - HEAD
                - PUT
                - POST
                - DELETE
              AllowedOrigins:
                - "*"
    UploadBucketPolicy:
      Type: AWS::S3::BucketPolicy
      Properties:
        Bucket:
          Ref: UploadBucket
        PolicyDocument:
          Statement:
            - Effect: "Allow"
              Action:
                - s3:GetObject
              Principal: "*"
              Sid: PublicGetObject
              Resource:
                Fn::Join:
                  - ""
                  - - "arn:aws:s3:::"
                    - "Ref": UploadBucket
                    - "/*"